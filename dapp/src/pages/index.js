import abi from '../../utils/BuyMeATea.json';
import { ethers } from 'ethers';
import Head from 'next/head';
import Image from 'next/image';
import { Inter } from 'next/font/google';
import React, { useEffect, useState } from "react";
import styles from '@/styles/Home.module.css';

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  // Contract Address & ABI
  const contractsAddress = "0xC2F13528B91582E64e18Ea3E0DCDfeFedBd9333F";
  const contractABI = abi.abi;

  // Component State
  const [currentAccount, setCurrentAccount] = useState("");
  const [name, setName] = useState("");
  const [message, setMessage] = useState("");
  const [memos, setMemos] = useState("");

  const onNameChange = (event) => {
    setName(event.target.value);
  }

  const onMessageChange = (event) => {
    setMessage(event.target.value);
  }

  // Wallet connection logic
  const isWalletConnected = async () =>  {
    try {
      const { ethereum } = window;


      const accounts = await ethereum.request({method: 'eth_accounts'});
      console.log("accounts: ", accounts);

      if (accounts.length > 0) {
        const account = accounts[0]
        console.log("wallet is connected!" + account);
      } else {
        console.log("make sure MetaMask is connected");
      }
    } catch (error) {
      console.log("error", error);
    }
  }

  const connectWallet = async () => {

    try {
      const {ethereum} = window;

      if(!ethreum) {
        console.log("Please install MetaMask");
      }

      const accounts = await ethereum.request({
        method: 'eth_requestAccounts'
      });

      setCurrentAccount(accounts[0]);
    } catch (error) {
      console.log(error);
    }
  }

  // Function for Buying Tea
  const buyTea = async () => {
    try {
      const { ethereum } = window;

      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum, "any");
        const signer = provider.getSigner();
        const buyMeATea = new ethers.Contract(contractsAddress, contractABI, signer);

        console.log("buying tea...");
        const teaTxn = await buyMeATea.buyMeATea(
            name ? name : "Anonymous",
            message ? message : "Enjoy your tea!",
            {value: ethers.utils.parseEther("0.001")}
        );

        await teaTxn.wait();

        console.log("mined", teaTxn.hash);
        console.log("tea purchased successfully");

        //Clear the form fields
        setName("");
        setMessage("");
      }
    } catch (error) {
      console.log(error);
    }
  };

  // Function to fetch all memos stored on-chain.
  const getMemos = async () => {
    try {
      const { ethereum } = window;
      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum, "any");
        const signer = provider.getSigner();
        const buyMeATea = new ethers.Contract(contractsAddress, contractABI, signer);

        console.log("fetching memos from the blockchain...");
        const memos = await buyMeATea.getMemos();
        console.log("fetched!");
        setMemos(memos);
      } else {
        console.log("Metamask is not connected");
      }
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    let buyMeATea;
    isWalletConnected();
    getMemos();

    // Create en event handler function for when someone sends
    // us a new memo.
    const onNewMemo = (from, timestamp, name, message) => {
      setMemos((prevState) => [
        ...prevState,
        {
          address: from,
          timestamp: new Date(timestamp * 1000),
          message,
          name
        }
      ]);
    };

    const { ethereum } = window;

    // Listen for new memo events.
    if (ethereum) {
      const provider = new ethers.providers.Web3Provider(ethereum, "any");
      const signer = provider.getSigner();
      buyMeATea = new ethers.Contract(contractsAddress, contractABI, signer);

      buyMeATea.on("NewMemo", onNewMemo);
    }

    return () => {
      if (buyMeATea) {
        buyMeATea.off("NewMemo", onNewMemo);
      }
    };
  }, []);

  return (
    <>
      <Head>
        <title>Buy Me a Tea!</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      <h1 className={styles.title}>
        Buy Me a Tea!
      </h1>

      <p className={styles.description}>
        「Buy Me a Tea!」へようこそ！このサービスでは、あなたはお茶代と一緒に心のこもったメッセージを送ることができます。感謝の気持ちや応援の気持ちを伝えるのに最適です。シンプルな方法であなたの気持ちを共有しましょう。
      </p>

      <div className={styles.formContainer}>
        <h2 className={styles.subtitle}>
          お茶を送る
        </h2>

        <div className={styles.formGroup}>
          <label htmlFor="name" className={styles.label}>
            あなたのお名前：
          </label>
          <input
            type="text"
            id="name"
            className={styles.input}
            value={name}
            onChange={onNameChange}
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="message" className={styles.label}>
            メッセージ：
          </label>
          <textarea
            id="message"
            className={styles.textarea}
            value={message}
            onChange={onMessageChange}
          ></textarea>
        </div>

        <button className={styles.button} onClick={buyTea}>
          お茶を贈る！
        </button>
      </div>

      {currentAccount ? (
        <div className={styles.walletInfo}>
          <p className={styles.walletAddress}>
            接続されたウォレットアドレス：{currentAccount}
          </p>
        </div>
      ) : (
        <button className={styles.connectButton} onClick={connectWallet}>
          ウォレットに接続する
        </button>
      )}

      <div className={styles.memoList}>
        <h2 className={styles.subtitle}>
          メモ一覧
        </h2>

        {memos.length > 0 ? (
          <ul className={styles.memoItems}>
            {memos.map((memo, index) => (
              <li key={index} className={styles.memoItem}>
                <p className={styles.memoFrom}>
                  送信元：{memo.name}（{memo.address}）
                </p>
                <p className={styles.memoMessage}>
                  メッセージ：{memo.message}
                </p>
                <p className={styles.memoTimestamp}>
                  タイムスタンプ：{memo.timestamp.toString()}
                </p>
              </li>
            ))}
          </ul>
        ) : (
          <p className={styles.noMemos}>
            メモはありません。
          </p>
        )}
      </div>
    </main>

    </>
  )
}
